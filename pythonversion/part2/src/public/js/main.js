// Same UI; message now generated by LangGraph + (optional) Watsonx
document.addEventListener('DOMContentLoaded', () => {
  fetchAndDisplayCoffees();
  
  // Fetch prices every 15 seconds to show dynamic pricing changes
  setInterval(fetchAndDisplayCoffees, 15000);
});

function fetchAndDisplayCoffees() {
  fetch('/api/coffees').then(r => r.json()).then(data => {
    const ctn = document.getElementById('coffees-container');
    
    // If container is empty, create coffee items
    if (ctn.children.length === 0) {
      data.forEach(coffee => {
        const div = document.createElement('div');
        div.classList.add('coffee-item');
        div.innerHTML = `
          <h3>${coffee.name}</h3>
          <p class="price">Price: $${coffee.price.toFixed(2)}</p>
          <button class="purchase-button" data-coffee-name="${coffee.name}" data-coffee-id="${coffee.id}">Purchase</button>
        `;
        ctn.appendChild(div);
      });
      document.querySelectorAll('.purchase-button').forEach(btn => btn.addEventListener('click', handlePurchase));
    } 
    // Otherwise, update existing prices and highlight changes
    else {
      data.forEach((coffee, index) => {
        const coffeeDiv = ctn.children[index];
        if (coffeeDiv) {
          const priceElement = coffeeDiv.querySelector('.price');
          const currentPrice = parseFloat(priceElement.textContent.split('$')[1]);
          const newPrice = coffee.price;
          
          if (currentPrice !== newPrice) {
            // Update price with animation
            priceElement.textContent = `Price: $${newPrice.toFixed(2)}`;
            priceElement.classList.add('price-changed');
            setTimeout(() => {
              priceElement.classList.remove('price-changed');
            }, 1000);
          }
        }
      });
    }
  });
}

function handlePurchase(e) {
  const name = e.target.getAttribute('data-coffee-name');
  const id = e.target.getAttribute('data-coffee-id');
  const customer = prompt('Please enter your name:');
  if (!customer || !customer.trim()) { alert('Name is required to complete the purchase.'); return; }
  window.currentOrder = { customerName: customer.trim(), coffeeName: name, coffeeId: id, customizations: { creams:1, milk:0, sugars:1, sweeteners:0, whippedCream:false } };
  resetCustomizationModal(); openCustomizationModal();
}

function openCustomizationModal(){ document.getElementById('customization-modal').style.display='block'; document.getElementById('selected-coffee-name').textContent=window.currentOrder.coffeeName; setDefaultCustomizations(); }
function setDefaultCustomizations(){ const ctn=document.getElementById('customization-modal'); const d={creams:1,milk:0,sugars:1,sweeteners:0,whippedCream:false}; for(const[k,v] of Object.entries(d)){ const g=ctn.querySelector(`.button-group[data-customization="${k}"]`); g.querySelectorAll('.customize-button').forEach(b=>{ const val=k==='whippedCream'?(b.getAttribute('data-value')==='true'):parseInt(b.getAttribute('data-value')); if(val===v){ b.classList.add('active'); window.currentOrder.customizations[k]=val; } else { b.classList.remove('active'); } b.removeEventListener('click',handleCustomizationClick); b.addEventListener('click',handleCustomizationClick); }); }}
function handleCustomizationClick(e){ const b=e.target; const g=b.parentElement; const t=g.getAttribute('data-customization'); g.querySelectorAll('.customize-button').forEach(x=>x.classList.remove('active')); b.classList.add('active'); window.currentOrder.customizations[t]= (t==='whippedCream') ? (b.getAttribute('data-value')==='true') : parseInt(b.getAttribute('data-value')); }
function resetCustomizationModal(){ document.querySelectorAll('#customization-modal .customize-button').forEach(b=>b.classList.remove('active')); }
function closeModal(m){ m.style.display='none'; }

document.getElementById('customization-form').addEventListener('submit', function(e){ e.preventDefault(); for(const k of ['creams','milk','sugars','sweeteners','whippedCream']) if(window.currentOrder.customizations[k]===undefined){ alert('Please select a value for all customization options.'); return; } fetch('/api/coffees/orders',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(window.currentOrder)}).then(r=>r.ok?r.json():Promise.reject('Failed')).then(d=>{ closeModal(document.getElementById('customization-modal')); openPurchaseModal(d?.message || `Your ${window.currentOrder.coffeeName} is ready.`); }).catch(err=>{ console.error(err); alert('There was an error processing your order. Please try again.'); }); });

function openPurchaseModal(message){ document.getElementById('user-name').textContent=window.currentOrder.customerName; document.getElementById('coffee-message').textContent=message; const img=document.getElementById('coffee-image'); img.src=getCoffeeImage(window.currentOrder.coffeeId); img.alt=`${window.currentOrder.coffeeName} Image`; displayCustomizations(); document.getElementById('purchase-modal').style.display='block'; }
function displayCustomizations(){ const ul=document.getElementById('customizations-list'); ul.innerHTML=''; const c=window.currentOrder.customizations; [ `Creams: ${c.creams}`, `Milks: ${c.milk}`, `Sugars: ${c.sugars}`, `Sweeteners: ${c.sweeteners}`, `Whipped Cream: ${c.whippedCream?'Yes':'No'}` ].forEach(t=>{ const li=document.createElement('li'); li.textContent=t; ul.appendChild(li); }); }
function getCoffeeImage(id){ const m={'1':'/images/espresso.webp','2':'/images/latte.webp','3':'/images/cappuccino.webp','4':'/images/americano.webp'}; return m[id] || '/images/coffee-default.webp'; }
document.querySelectorAll('.close-button').forEach(b=>b.addEventListener('click',e=>closeModal(e.target.closest('.modal'))));
window.addEventListener('click',e=>{const p=document.getElementById('purchase-modal'); const c=document.getElementById('customization-modal'); if(e.target==p) closeModal(p); if(e.target==c) closeModal(c);});

// Made with Bob
